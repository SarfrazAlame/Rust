{"$message_type":"diagnostic","message":"match bindings cannot shadow tuple variants","code":{"code":"E0530","explanation":"A binding shadowed something it shouldn't.\n\nA match arm or a variable has a name that is already used by\nsomething else, e.g.\n\n* struct name\n* enum variant\n* static\n* associated constant\n\nThis error may also happen when an enum variant *with fields* is used\nin a pattern, but without its fields.\n\n```compile_fail\nenum Enum {\n    WithField(i32)\n}\n\nuse Enum::*;\nmatch WithField(1) {\n    WithField => {} // error: missing (_)\n}\n```\n\nMatch bindings cannot shadow statics:\n\n```compile_fail,E0530\nstatic TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    TEST => {} // error: name of a static\n}\n```\n\nFixed examples:\n\n```\nstatic TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    some_value => {} // ok!\n}\n```\n\nor\n\n```\nconst TEST: i32 = 0; // const, not static\n\nlet r = 123;\nmatch r {\n    TEST => {} // const is ok!\n    other_values => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":389,"byte_end":391,"line_start":22,"line_end":22,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        Ok=> print!(\"{:?}\", v),","highlight_start":9,"highlight_end":11}],"label":"cannot be named the same as a tuple variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Sarfaraj\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\prelude\\mod.rs","byte_start":7383,"byte_end":7407,"line_start":179,"line_end":179,"column_start":13,"column_end":37,"is_primary":false,"text":[{"text":"    pub use core::prelude::rust_2024::*;","highlight_start":13,"highlight_end":37}],"label":"the tuple variant `Ok` is defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try specify the pattern arguments","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":389,"byte_end":391,"line_start":22,"line_end":22,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        Ok=> print!(\"{:?}\", v),","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"Ok(..)","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0530]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: match bindings cannot shadow tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:22:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok=> print!(\"{:?}\", v),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot be named the same as a tuple variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try specify the pattern arguments: `Ok(..)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Sarfaraj\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\prelude\\mod.rs:179:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use core::prelude::rust_2024::*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthe tuple variant `Ok` is defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"match bindings cannot shadow tuple variants","code":{"code":"E0530","explanation":"A binding shadowed something it shouldn't.\n\nA match arm or a variable has a name that is already used by\nsomething else, e.g.\n\n* struct name\n* enum variant\n* static\n* associated constant\n\nThis error may also happen when an enum variant *with fields* is used\nin a pattern, but without its fields.\n\n```compile_fail\nenum Enum {\n    WithField(i32)\n}\n\nuse Enum::*;\nmatch WithField(1) {\n    WithField => {} // error: missing (_)\n}\n```\n\nMatch bindings cannot shadow statics:\n\n```compile_fail,E0530\nstatic TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    TEST => {} // error: name of a static\n}\n```\n\nFixed examples:\n\n```\nstatic TEST: i32 = 0;\n\nlet r = 123;\nmatch r {\n    some_value => {} // ok!\n}\n```\n\nor\n\n```\nconst TEST: i32 = 0; // const, not static\n\nlet r = 123;\nmatch r {\n    TEST => {} // const is ok!\n    other_values => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":421,"byte_end":424,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        Err => print!(\"Error while serializing\")","highlight_start":9,"highlight_end":12}],"label":"cannot be named the same as a tuple variant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\Sarfaraj\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\prelude\\mod.rs","byte_start":7383,"byte_end":7407,"line_start":179,"line_end":179,"column_start":13,"column_end":37,"is_primary":false,"text":[{"text":"    pub use core::prelude::rust_2024::*;","highlight_start":13,"highlight_end":37}],"label":"the tuple variant `Err` is defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"try specify the pattern arguments","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":421,"byte_end":424,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        Err => print!(\"Error while serializing\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"Err(..)","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0530]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: match bindings cannot shadow tuple variants\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:23:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err => print!(\"Error while serializing\")\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot be named the same as a tuple variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: try specify the pattern arguments: `Err(..)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mC:\\Users\\Sarfaraj\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\std\\src\\prelude\\mod.rs:179:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub use core::prelude::rust_2024::*;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthe tuple variant `Err` is defined here\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":421,"byte_end":424,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        Err => print!(\"Error while serializing\")","highlight_start":9,"highlight_end":12}],"label":"no value can reach this","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":389,"byte_end":391,"line_start":22,"line_end":22,"column_start":9,"column_end":11,"is_primary":false,"text":[{"text":"        Ok=> print!(\"{:?}\", v),","highlight_start":9,"highlight_end":11}],"label":"matches any value","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unreachable pattern\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:23:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok=> print!(\"{:?}\", v),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmatches any value\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err => print!(\"Error while serializing\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mno value can reach this\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `Ok`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":389,"byte_end":391,"line_start":22,"line_end":22,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        Ok=> print!(\"{:?}\", v),","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":389,"byte_end":391,"line_start":22,"line_end":22,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        Ok=> print!(\"{:?}\", v),","highlight_start":9,"highlight_end":11}],"label":null,"suggested_replacement":"_Ok","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `Ok`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:22:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok=> print!(\"{:?}\", v),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_Ok`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `Err`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":421,"byte_end":424,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        Err => print!(\"Error while serializing\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":421,"byte_end":424,"line_start":23,"line_end":23,"column_start":9,"column_end":12,"is_primary":true,"text":[{"text":"        Err => print!(\"Error while serializing\")","highlight_start":9,"highlight_end":12}],"label":null,"suggested_replacement":"_Err","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `Err`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:23:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Err => print!(\"Error while serializing\")\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_Err`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0530`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0530`.\u001b[0m\n"}
